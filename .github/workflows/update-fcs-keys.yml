name: Update FCS Keys

on:
  schedule:
    - cron: '0 19 * * *'  # daily at 11:00 PST (19:00 UTC)
  workflow_dispatch:

jobs:
  update-fcs-keys:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: [stable, rc, beta]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Build ipsw CLI
        run: |
          go build -o ipsw ./cmd/ipsw
      
      - name: Get latest builds
        id: get-builds
        run: |
          echo "Getting latest ${{ matrix.type }} build numbers..."
          
          # Set flags based on type
          if [ "${{ matrix.type }}" = "beta" ]; then
            FLAGS="--beta"
          elif [ "${{ matrix.type }}" = "rc" ]; then
            FLAGS=""  # RCs use regular OTA endpoint
          else
            FLAGS=""  # Stable releases
          fi
          
          # Get builds using ipsw CLI
          IOS_BUILD=$(./ipsw download ota --platform ios $FLAGS --show-latest-build --device iPhone16,2 --insecure 2>/dev/null || echo "")
          MACOS_BUILD=$(./ipsw download ota --platform macos $FLAGS --show-latest-build --device Mac14,7 --insecure 2>/dev/null || echo "")
          VISIONOS_BUILD=$(./ipsw download ota --platform visionOS $FLAGS --show-latest-build --device RealityDevice14,1 --insecure 2>/dev/null || echo "")
          
          echo "ios_build=$IOS_BUILD" >> $GITHUB_OUTPUT
          echo "macos_build=$MACOS_BUILD" >> $GITHUB_OUTPUT
          echo "visionos_build=$VISIONOS_BUILD" >> $GITHUB_OUTPUT
          
          # Create build fingerprint
          BUILD_FINGERPRINT="${IOS_BUILD}_${MACOS_BUILD}_${VISIONOS_BUILD}"
          echo "build_fingerprint=$BUILD_FINGERPRINT" >> $GITHUB_OUTPUT
          echo "Current ${{ matrix.type }} build fingerprint: $BUILD_FINGERPRINT"
      
      - name: Check for new builds
        id: check-builds
        run: |
          # Get last cached build fingerprint
          CACHE_KEY="fcs_keys_${{ matrix.type }}"
          LAST_FINGERPRINT=$(jq -r --arg key "$CACHE_KEY" '.[$key].build_fingerprint // ""' hack/.watch_cache)
          CURRENT_FINGERPRINT="${{ steps.get-builds.outputs.build_fingerprint }}"
          
          echo "Last cached ${{ matrix.type }} build fingerprint: $LAST_FINGERPRINT"
          echo "Current ${{ matrix.type }} build fingerprint: $CURRENT_FINGERPRINT"
          
          if [ "$LAST_FINGERPRINT" = "$CURRENT_FINGERPRINT" ]; then
            echo "No new ${{ matrix.type }} builds found; skipping"
            echo "should_update=false" >> $GITHUB_OUTPUT
          else
            echo "New ${{ matrix.type }} builds found; proceeding with update"
            echo "should_update=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Update FCS keys
        if: steps.check-builds.outputs.should_update == 'true'
        run: |
          echo "Running FCS keys update for ${{ matrix.type }}..."
          if [ "${{ matrix.type }}" = "beta" ]; then
            make update_fcs_keys_beta
          elif [ "${{ matrix.type }}" = "rc" ]; then
            make update_fcs_keys_rc
          else
            # For stable, use the release target with specific builds
            make update_fcs_keys_release \
              FCS_IOS_BUILD="${{ steps.get-builds.outputs.ios_build }}" \
              FCS_MOS_BUILD="${{ steps.get-builds.outputs.macos_build }}" \
              FCS_VOS_BUILD="${{ steps.get-builds.outputs.visionos_build }}"
          fi
      
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet pkg/aea/data/fcs-keys.json pkg/aea/data/fcs-keys.gz; then
            echo "No changes to FCS keys files"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "FCS keys files have been updated"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Update cache and commit
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          # Update the cache file with the new build fingerprint
          CACHE_KEY="fcs_keys_${{ matrix.type }}"
          jq -c --arg key "$CACHE_KEY" \
             --arg fp "${{ steps.get-builds.outputs.build_fingerprint }}" \
             --arg ios "${{ steps.get-builds.outputs.ios_build }}" \
             --arg macos "${{ steps.get-builds.outputs.macos_build }}" \
             --arg visionos "${{ steps.get-builds.outputs.visionos_build }}" \
             '.[$key] = {
                "build_fingerprint": $fp,
                "ios_build": $ios,
                "macos_build": $macos,
                "visionos_build": $visionos,
                "updated_at": now | strftime("%Y-%m-%dT%H:%M:%SZ")
              }' hack/.watch_cache > hack/.watch_cache.tmp
          mv hack/.watch_cache.tmp hack/.watch_cache
          
          # Configure git
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit the changes
          git add pkg/aea/data/fcs-keys.json pkg/aea/data/fcs-keys.gz hack/.watch_cache
          git commit -m "chore(fcs-keys): update ${{ matrix.type }} FCS keys (iOS: ${{ steps.get-builds.outputs.ios_build }}, macOS: ${{ steps.get-builds.outputs.macos_build }}, visionOS: ${{ steps.get-builds.outputs.visionos_build }}) [skip ci]"
          git push